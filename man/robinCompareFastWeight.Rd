% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ROBINWeighted.R
\name{robinCompareFastWeight}
\alias{robinCompareFastWeight}
\title{#' rewireWeight
#' @description makes the rewire for weighted networks
#' @param data The output of prepGraph
#' @param number Number of rewiring trials to perform.
#' @param type method to rewire weighted graphs
#' @keywords internal
rewireWeight <- function(data, number, type=NULL)
{
    if(type=="Shuffle")
    {
        print("Shuffle weights Method")
           <- sample(E(graph)$weight)
           
           
         
    }else if(type=="Garlaschelli"){
        print("Garlaschelli Method")
        
     
        
    }else if(type=="Sum"){
       
        print("Keep Sum and distribution weight Method") 
        # Set di n numeri
        
        
    }else {
    print("Rewire robin Method")
     graphRewire <- igraph::rewire(data, with=keeping_degseq(loops=FALSE,
                                                            niter=number))
     NotChaged <- igraph::intersection(graph, graphRewire)
     newWeight <- sample(E(difference(graph,graphRewire))$weight)
     EdgeAggiunti <- E(difference(graphRewire,graph))
     gg <- difference(graphRewire,graph)
     E(gg)$weight <- newWeight
     U <- union(gg,NotChaged)
     E(U)$weight_1[which(is.na(E(U)$weight_1), arr.ind = TRUE)] <- E(U)$weight[which(!is.na(E(U)$weight),
                                                                                     arr.ind = TRUE)]
     E(U)$weight <- E(U)$weight_1
     U <- delete_edge_attr(U, "weight_1")
     U <- delete_edge_attr(U, "weight_2")
     }
    
    
    
    return(U)
}
robinCompareFastWeight}
\usage{
robinCompareFastWeight(
  graph,
  method1 = c("walktrap", "edgeBetweenness", "fastGreedy", "leadingEigen", "louvain",
    "spinglass", "labelProp", "infomap", "optimal", "leiden", "other"),
  args1 = list(),
  method2 = c("walktrap", "edgeBetweenness", "fastGreedy", "leadingEigen", "louvain",
    "spinglass", "labelProp", "infomap", "optimal", "leiden", "other"),
  args2 = list(),
  FUN1 = NULL,
  FUN2 = NULL,
  measure = c("vi", "nmi", "split.join", "adjusted.rand"),
  verbose = TRUE,
  dist = "Other",
  BPPARAM = BiocParallel::bpparam()
)
}
\arguments{
\item{graph}{The output of prepGraph.}

\item{method1}{The first clustering method, one of "walktrap",
"edgeBetweenness", "fastGreedy", "louvain", "spinglass", "leadingEigen",
"labelProp", "infomap","optimal","leiden".}

\item{args1}{A \code{list} of arguments to be passed to the \code{method1} 
(see i.e. \link[igraph]{cluster_leiden} for a list of possible method parameters).}

\item{method2}{The second custering method one of "walktrap",
"edgeBetweenness","fastGreedy", "louvain", "spinglass", "leadingEigen",
"labelProp", "infomap","optimal","leiden".}

\item{args2}{A \code{list} of arguments to be passed to the \code{method2}
(see i.e. \link[igraph]{cluster_leiden} for a list of possible method parameters).}

\item{FUN1}{personal designed function when method1 is "others".
see \code{\link{methodCommunity}}.}

\item{FUN2}{personal designed function when method2 is "others".
see \code{\link{methodCommunity}}.}

\item{measure}{The stability measure, one of "vi", "nmi", "split.join",
"adjusted.rand" all normalized and used as distances.
"nmi" refers to 1- nmi and "adjusted.ran" refers to 1-adjusted.rand.}

\item{verbose}{flag for verbose output (default as TRUE).}

\item{dist}{Option to rewire in a manner that retains overall graph weight 
regardless of distribution of edge weights. This option is invoked by putting 
any text into this field. Defaults to "Other". See \link[perturbR]{rewireR}
 for details.}

\item{BPPARAM}{the BiocParallel object of class \code{bpparamClass} that 
specifies the back-end to be used for computations. See
\link[BiocParallel]{bpparam} for details.}
}
\value{
A list object with two matrices:
- the matrix "Mean1" with the means of the procedure for the first method
- the matrix "Mean2" with the means of the procedure for the second method
}
\description{
This function compares two community detection algorithms, from
weighted networks. Is the parallelized and faster version.
}
\keyword{internal}
